<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML &amp; CSS</title>
      <link href="/2021/082261069.html"/>
      <url>/2021/082261069.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL</title>
      <link href="/2021/082215764.html"/>
      <url>/2021/082215764.html</url>
      
        <content type="html"><![CDATA[<p><strong>STL里sort算法用的是什么排序算法？</strong></p><p><strong>实现逻辑</strong></p><p>STL的sort算法，数据量大时采用<strong>QuickSort快排算法</strong>，分段归并排序。一旦分段后的数据量小于某个门槛，为避免QuickSort快排的递归调用带来过大的额外负荷，就改用<strong>Insertion Sort插入排序</strong>。如果递归层次过深，还会改用<strong>HeapSort堆排序</strong>。</p><img src="https://pic1.zhimg.com/80/v2-8fa032e195365f77fb6b980a4ed71958_1440w.jpg" style="zoom:33%;"><p>结合快速排序-插入排序-堆排序 三种排序算法。</p><h2 id="for-auto-a-b"><a href="#for-auto-a-b" class="headerlink" title="for(auto a:b)"></a>for(auto a:b)</h2><p>for(auto a:b)中b为一个容器，效果是利用a<strong>遍历并获得b容器</strong>中的每一个值，但是a无法影响到b容器中的元素。</p><pre class="line-numbers language-c++"><code class="language-c++">vector<int> arr;arr.push_back(1);arr.push_back(2);for (auto n : arr){    cout << n << endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for(auto &amp;a:b)中加了引用符号，可以对容器中的内容进行赋值，即可通过对a赋值来做到容器b的内容填充。</p><h2 id="map与unordered-map"><a href="#map与unordered-map" class="headerlink" title="map与unordered_map"></a>map与unordered_map</h2><p><strong>需要引入的头文件不同</strong><br>map: #include &lt; map &gt;<br>unordered_map: #include &lt; unordered_map &gt;</p><p><strong>内部实现机理不同</strong><br>map： map内部实现了一个红黑树（红黑树是非严格平衡二叉搜索树，而AVL是严格平衡二叉搜索树），红黑树具有自动排序的功能，因此map内部的所有元素都是有序的，红黑树的每一个节点都代表着map的一个元素。因此，对于map进行的查找，删除，添加等一系列的操作都相当于是对红黑树进行的操作。map中的元素是按照二叉搜索树（又名二叉查找树、二叉排序树，特点就是左子树上所有节点的键值都小于根节点的键值，右子树所有节点的键值都大于根节点的键值）存储的，使用中序遍历可将键值按照从小到大遍历出来。<br>unordered_map: unordered_map内部实现了一个哈希表（也叫散列表，通过把关键码值映射到Hash表中一个位置来访问记录，查找的时间复杂度可达到O(1)，其在海量数据处理中有着广泛应用）。因此，其元素的排列顺序是无序的。哈希表详细介绍</p><p><strong>优缺点以及适用处</strong><br>map：</p><p>优点：</p><p>有序性，这是map结构最大的优点，其元素的有序性在很多应用中都会简化很多的操作<br>红黑树，内部实现一个红黑书使得map的很多操作在lgn的时间复杂度下就可以实现，因此效率非常的高<br>缺点： 空间占用率高，因为map内部实现了红黑树，虽然提高了运行效率，但是因为每一个节点都需要额外保存父节点、孩子节点和红/黑性质，使得每一个节点都占用大量的空间</p><p>适用处：对于那些有顺序要求的问题，用map会更高效一些</p><p>unordered_map：</p><p>优点： 因为内部实现了哈希表，因此其查找速度非常的快<br>缺点： 哈希表的建立比较耗费时间<br>适用处：对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map<br>总结：</p><p>内存占有率的问题就转化成红黑树 VS hash表 , 还是unorder_map占用的内存要高。<br>但是unordered_map执行效率要比map高很多<br>对于unordered_map或unordered_set容器，其遍历顺序与创建该容器时输入的顺序不一定相同，因为遍历是按照哈希表从前往后依次遍历的<br><strong>map和unordered_map的使用</strong><br>unordered_map的用法和map是一样的，提供了 insert，size，count等操作，并且里面的元素也是以pair类型来存贮的。其底层实现是完全不同的，上方已经解释了，但是就外部使用来说却是一致的。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span>  </span>using namespace std<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//注意：C++11才开始支持括号初始化</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> myMap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"张大"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"李五"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用{}赋值</span>    myMap<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使用[ ]进行单个插入，若已存在键值2，则赋值修改，若无则插入。</span>    myMap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"陈二"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用insert和pair插入</span>      <span class="token comment" spellcheck="true">//遍历输出+迭代器的使用</span>    <span class="token keyword">auto</span> iter <span class="token operator">=</span> myMap<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//auto自动识别为迭代器类型unordered_map&lt;int,string>::iterator</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token operator">!=</span> myMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          cout <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>          <span class="token operator">++</span>iter<span class="token punctuation">;</span>      <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//查找元素并输出+迭代器的使用</span>    <span class="token keyword">auto</span> iterator <span class="token operator">=</span> myMap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//find()返回一个指向2的迭代器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator <span class="token operator">!=</span> myMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> iterator<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> iterator<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Stack和pair的基本用法"><a href="#Stack和pair的基本用法" class="headerlink" title="Stack和pair的基本用法"></a>Stack和pair的基本用法</h2><p><strong>Stack(栈)是一种后进先出的数据结构</strong><br>使用STL的STACK需要的头文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Stack的构造"><a href="#Stack的构造" class="headerlink" title="Stack的构造"></a>Stack的构造</h3><pre class="line-numbers language-c"><code class="language-c">stack<span class="token operator">&lt;</span> <span class="token keyword">int</span> <span class="token operator">></span> first <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造一个存放int类型的空栈，size=0；</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><p><strong>push</strong></p><pre class="line-numbers language-c"><code class="language-c">mystack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>push函数将参数元素加入栈中，没有返回值（例如这里循环将0,1,2,3,4加入栈中，注意栈顶元素是4）</p><p><strong>size</strong></p><pre class="line-numbers language-c"><code class="language-c">mystack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>size函数返回栈的大小（如果有5个元素，size=5）</p><p><strong>empty</strong></p><pre class="line-numbers language-c"><code class="language-c">mystack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>empty函数返回一个bool值，栈为空时返回true，否则返回false</p><p><strong>top</strong></p><pre class="line-numbers language-c"><code class="language-c">mystack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>top函数的返回值是栈顶元素（注意并没有删掉栈顶元素</p><p><strong>pop</strong></p><pre class="line-numbers language-c"><code class="language-c">mystack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pop函数将栈顶元素删掉，没有返回值</p><p><strong>emplace</strong></p><pre class="line-numbers language-c"><code class="language-c">stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> mystack<span class="token punctuation">;</span>mystack<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>emplace函数可以将一个元素加入栈中，与push的区别在于：emplace可以直接传入Node的构造函数的参数，并将构造的元素加入栈中<br>mystack.push(1,2); //编译不通过，要达到上面的效果需要手动构造，例如mystack.push(Node(1,2));</p><pre class="line-numbers language-c"><code class="language-c">Node p <span class="token operator">=</span> mystack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> my2<span class="token punctuation">;</span>my2<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>mystack<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//swap函数可以交换两个栈的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>pair</strong><br>pair是将2个数据组合成一组数据， pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。。<br><strong>头文件</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>类模板：</strong></p><pre class="line-numbers language-c"><code class="language-c">template<span class="token operator">&lt;</span>class T1<span class="token punctuation">,</span>class T2<span class="token operator">></span> <span class="token keyword">struct</span> pair<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：T1是第一个值的数据类型，T2是第二个值的数据类型。<br>功能：pair将一对值(T1和T2)组合成一个值，</p><pre class="line-numbers language-c"><code class="language-c">pair<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token function">p1</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个pair对象，它的两个元素分别是T1和T2类型，其中first成员初始化为v1，second成员初始化为v2。</span><span class="token function">make_pair</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 以v1和v2的值创建一个新的pair对象，其元素类型分别是v1和v2的类型。</span>p1 <span class="token operator">&lt;</span> p2<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 两个pair对象间的小于运算，其定义遵循字典次序：如 p1.first &lt; p2.first 或者 !(p2.first &lt; p1.first) &amp;&amp; (p1.second &lt; p2.second) 则返回true。</span>p1 <span class="token operator">==</span> p2；                  <span class="token comment" spellcheck="true">// 如果两个对象的first和second依次相等，则这两个对象相等；该运算使用元素的==操作符。</span>p1<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 返回对象p1中名为first的公有数据成员</span>p1<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 返回对象p1中名为second的公有数据成员</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建pair</strong><br>在创建pair对象时，必须提供两个类型名，两个对应的类型名的类型<strong>不必相同</strong></p><pre class="line-numbers language-c"><code class="language-c">pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> anon<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个空对象anon，两个元素类型都是string</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> word_count<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 创建一个空对象 word_count, 两个元素类型分别是string和int类型</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> line<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建一个空对象line，两个元素类型分别是string和vector类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="卡特兰数的应用"><a href="#卡特兰数的应用" class="headerlink" title="卡特兰数的应用"></a>卡特兰数的应用</h2><p>题目：12个高矮不同的人，排成两排，每排必须是从矮到高排列，而且第二排比对应的第一排的人高，问排列方式有多少种？</p><p>​    从题目可知，要把12个人分成两排，而且每个人的身高都不一样，所以不管怎么分组，他们的身高都可以按从小到大排列，只是要求第二排比对应第一排的人高。<br><strong>思路是:<strong>把这个问题化成出栈次序（典型的卡特兰数的应用）求解。<br>因为每排有6个人，所以,设第一排的6个人分别为A,B,C,D,E,F（还不确定他们是12个人中的哪一个）<br>对这(A,B,C,D,E,F)执行入栈和出栈(从A到F)，从他们出栈序列就可以找到这A,B,C,D,E,F是12个人中的具体哪一个。<br><strong>方法是：</strong><br>假设这12个人的身高分别为1,2,3,4,5,6,7,8,9,10,11,12<br>设入栈为“1”，出栈为“0”，这样一系列的入栈和出栈就可以由一串1和0构成。例如出栈序列为A,B,C,D,E,F，则对应的这一串1和0为：101010101010。利用这串1和0，就可以找到这12个人哪个是第一排的，哪个是第二排的。把这12个人的身高从小到大排列，1,2,3,4,5,6,7,8,9,10,11,12  利用刚刚得到的那串1和0，和他们的身高序列一一对上。则对应1的身高为1,3,5,7,9,11；对应0的身高为2,4,6,8,10,12。1对应的其实就是第一排的人，0对应的就是第二排的人。再看看出栈序列为A,C,D,B,F,E对应的1和0串为101101001100，则第一排的身高序列为1,3,4,6,9,10;第二排的身高序列为2,5,7,8,11,12。这样，每一种出栈序列就对应每一种排列方式，而且是一一对应的。因为出栈序列是典型的卡特兰数的应用（百度百科就有举例),这样就可以很直接的写出结果</strong>C（12,6）/（6+1）=132</strong>，则总共有132种排列方式。<br><strong>下面解释为什么可以用那一串1和0就可以确定他们的排列方式</strong><br>​    因为出栈总是相对于入栈的，要想出栈，则必定先有入栈。所以1总是先于0出现，也就是说可以先找到身高比较矮的插入第一排，把身高比之前插入第一排的还要高的插入第二排（每一个0对应的身高都比前面所有的1对应的身高还要高，而且0和1的数量又是相等的，第几个1对应第几个0），这样就可以全部找到第二排比对应的第一排的人高的全部排列方式。不同的出栈序列决定不同的排列方式。有多少种出栈序列就有多少种排列方式，这样就很明显看出来是卡特兰数的应用了。</p><h3 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a><strong>经典问题</strong></h3><h3 id="2-1-进出栈序列"><a href="#2-1-进出栈序列" class="headerlink" title="2.1 进出栈序列"></a><strong>2.1 进出栈序列</strong></h3><p>这是一道 <strong>最经典</strong> 的入门级卡特兰数题目，如果能把这题看懂，相信后面的题目也能迎刃而解。</p><p><strong>题目描述</strong></p><p>n 个元素进栈序列为：1，2，3，4，…，n，则有多少种出栈序列。</p><p><strong>思路</strong></p><p>我们将进栈表示为 +1，出栈表示为 -1，则 1 3 2 的出栈序列可以表示为：+1 -1 +1 +1 -1 -1。</p><p>&lt;img src=”<a href="https://pic2.zhimg.com/80/v2-fe28b25ed263230250d0a3c68344b0d5_1440w.jpg&quot;style=&quot;zoom:50%;&quot;">https://pic2.zhimg.com/80/v2-fe28b25ed263230250d0a3c68344b0d5_1440w.jpg"style="zoom:50%;"</a> /&gt;</p><p>根据栈本身的特点，每次出栈的时候，必定之前有元素入栈，即对于每个 -1 前面都有一个 +1 相对应。因此，出栈序列的 <strong>所有前缀和</strong> 必然大于等于 0，并且 +1 的数量 <strong>等于</strong> -1 的数量。</p><p>接下来让我们观察一下 n = 3 的一种出栈序列：+1 -1 -1 +1 -1 +1。序列前三项和小于 0，显然这是个非法的序列。</p><p>如果将 <strong>第一个</strong> 前缀和小于 0 的前缀，即前三项元素都进行取反，就会得到：-1 +1 +1 +1 -1 +1。此时有 3 + 1 个 +1 以及 3 - 1 个 -1。</p><p>因为这个小于 0 的前缀和必然是 -1，且 -1 比 +1 多一个，取反后，-1 比 +1 少一个，则 +1 变为 n + 1 个，且 -1 变为 n - 1 个。进一步推广，对于 n 元素的每种非法出栈序列，都会对应一个含有 n + 1 个 +1 以及 n - 1个 -1 的序列。</p><p>如何证明这两种序列是一一对应的？</p><p>假设非法序列为 A，对应的序列为 B。每个 A 只有一个”<strong>第一个前缀和小于 0 的前缀</strong>“，所以每个 A 只能产生一个 B。而每个 B 想要还原到 A，就需要找到”<strong>第一个前缀和大于 0 的前缀</strong>“，显然 B 也只能产生一个 A。</p><p><img src="https://pic3.zhimg.com/80/v2-1224b08274913efa2cd7dbb31f8e6262_1440w.jpg"></p><p>每个 B 都有 n + 1 个 +1 以及 n - 1 个 -1，因此 B 的数量为 <img src="https://www.zhihu.com/equation?tex=C_%7B2n%7D%5E%7Bn+1%7D"> ，相当于在长度为 2n 的序列中找到<code>n + 1</code>个位置存放 +1。相应的，非法序列的数量也就等于 <img src="https://www.zhihu.com/equation?tex=C_%7B2n%7D%5E%7Bn+1%7D"> 。</p><p>出栈序列的总数量共有 <img src="https://www.zhihu.com/equation?tex=C_%7B2n%7D%5E%7Bn%7D"> ，因此，合法的出栈序列的数量为 <img src="https://www.zhihu.com/equation?tex=C_%7B2n%7D%5E%7Bn%7D+-+C_%7B2n%7D%5E%7Bn+1%7D+=+%5Cfrac%7BC_%7B2n%7D%5En%7D%7Bn+++1%7D"> 。</p><p>此时我们就得到了卡特兰数的通项 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7BC_%7B2n%7D%5En%7D%7Bn+++1%7D"> ，至于具体如何计算结果将会在后面进行介绍。</p><h3 id="2-2-括号序列"><a href="#2-2-括号序列" class="headerlink" title="2.2 括号序列"></a><strong>2.2 括号序列</strong></h3><p><strong>题目描述</strong></p><p>n 对括号，则有多少种 “括号匹配” 的括号序列</p><img src="https://pic3.zhimg.com/80/v2-e5785ad4be18724da3059efd87307706_1440w.jpg" style="zoom:50%;"><p><strong>思路</strong></p><p>左括号看成 +1，右括号看成 -1，那么就和上题的进出栈一样，共有 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7BC_%7B2n%7D%5En%7D%7Bn+++1%7D"> 种序列。</p><h1 id="push-back-函数"><a href="#push-back-函数" class="headerlink" title="push_back()函数"></a>push_back()函数</h1><p>push_back()函数的用法</p><p>函数将一个新的元素加到vector的最后面，位置为当前最后一个元素的下一个元素</p><p>push_back() 在Vector最后添加一个元素（参数为要插入的值）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//在vec尾部添加10</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//在容器中添加10</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者再string中最后插入一个字符；</p><pre class="line-numbers language-c"><code class="language-c">string str<span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>类似的：</p><p>pop_back() //移除最后一个元素</p><p>clear()  //清空所有元素</p><p>empty() //判断vector是否为空，如果返回true为空</p><p>erase() // 删除指定元素</p><h1 id="accumulate函数"><a href="#accumulate函数" class="headerlink" title="accumulate函数"></a>accumulate函数</h1><p>头文件</p><p><code>#include &lt;numeric&gt;</code></p><p>主要是用来累加容器里面的值，比如int、string之类，可以少写一个for循环</p><ul><li>比如直接统计 <code>vector&lt;int&gt; v </code>里面所有元素的和：（第三个参数的0表示sum的初始值为0）</li></ul><p><code>int sum = accumulate(v.begin(), v.end(), 0);</code></p><ul><li>比如直接将<code>vector&lt;string&gt; v</code>里面所有元素一个个累加到string str中：（第三个元素表示str的初始值为空字符串）</li></ul><p><code>string str = accumulate(v.begin(), v.end(), "");</code></p><h1 id="C的printf与scanf的用法"><a href="#C的printf与scanf的用法" class="headerlink" title="C的printf与scanf的用法"></a>C的printf与scanf的用法</h1><ul><li>在C++中，是#include<iostream>.而在C中是#include&lt;stdio.h&gt;</iostream></li></ul><ol><li>printf的用法是：printf(“格式控制字符串”，输出参数一，输出参数二);</li></ol><p>格式控制字符串包含：格式控制说明，普通字符</p><p>​    格式控制说明主要是按指定的格式输出数据，包含以%开头的格式控制字符，不同类型的数据采用不同的格式控制字符（int型用%d,float和double用%f）</p><p>​    普通字符就是在输出数据的时候，按照原样输出的字符如：”fahr=%d,celsius=%d\n”中的fahr=，celsius=这些</p><ol start="2"><li>scanf的用法是：scanf(“格式控制字符串”,输入参数一，输入参数二)；</li></ol><p>格式控制字符串包含：格式控制说明，普通字符</p><p>  格式控制字符串表示输入的格式，(int型用%d,float用%f,double型用%lf)</p><p>  普通字符：和上面谈到的printf的用法是一样的</p><p>  输入的参数是变量的地址，所以要在变量前面加&amp;</p><p>——–格式控制说明———————————————————</p><p>%d 十进制有符号整数<br>%u 十进制无符号整数<br>%f 浮点数<br>%s 字符串<br>%c 单个字符<br>%p 指针的值<br>%e 指数形式的浮点数<br>%x, %X 无符号以十六进制表示的整数<br>%0 无符号以八进制表示的整数<br>%g 自动选择合适的表示法 </p><p>——一些特殊规定字符———————————————————–</p><p>\n 换行<br>\f 清屏并换页<br>\r 回车<br>\t Tab符<br>\xhh 表示一个ASCII码用16进表示,<br>其中hh是1到2个16进制数</p><p>例子：</p><p>①</p><pre class="line-numbers language-c"><code class="language-c">a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a=100,b=10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>②</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter x(x>=0):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//enter x(x>=0):</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>③</p><pre class="line-numbers language-c"><code class="language-c">x<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y=f(%f)=%.2f\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//y=f(12.000000)=16.00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>%f指定以小数形式输出浮点型数据，保留的是6位小数，而%.2f则指定输出的时候保留2位小数</p><p>④</p><pre class="line-numbers language-c"><code class="language-c">x<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>%04d 表示在输出一个小于4位的数值时, 将在前面补0使其总宽度为4位。</p><p>⑤</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取输入</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用scanf()函数输入数据，变量名x前面要加&amp;,%lf中的l是long的首字母,scanf函数的输入参数必须和格式控制字符串中的格式控制说明相对应，</p><p>并且它们的类型，个数和位置要一一对`应。</p><p>scanf(“%d%d%lf”,&amp;x,&amp;y,&amp;z)表示输入的x是int型的，y是int型的，z是double型的，这个就是一一对应</p>]]></content>
      
      
      <categories>
          
          <category> C++ STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python计算</title>
      <link href="/2021/082264081.html"/>
      <url>/2021/082264081.html</url>
      
        <content type="html"><![CDATA[<h2 id="第1章-基础知识"><a href="#第1章-基础知识" class="headerlink" title="第1章 基础知识"></a>第1章 基础知识</h2><h3 id="1-4-1-对象模型"><a href="#1-4-1-对象模型" class="headerlink" title="1.4.1 对象模型"></a>1.4.1 对象模型</h3><p>• 对象：python中处理的每样“东西”都是对象</p><p>• 内置对象：可直接使用</p><p>如 数字、字符串、列表、del等；</p><p>• 非内置对象：需要导入模块才能使用</p><p>如 sin(x)，random( )等。</p><table><thead><tr><th align="center">对象类型</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">数字</td><td align="center">1234，3.14</td></tr><tr><td align="center">字符串</td><td align="center">‘Python’</td></tr><tr><td align="center">日期</td><td align="center">2012-08-25</td></tr><tr><td align="center">字典</td><td align="center">[1,2,3]</td></tr><tr><td align="center">元组</td><td align="center">{1:’food’,2:’taste’}</td></tr><tr><td align="center">文件</td><td align="center">(1,2,3)</td></tr><tr><td align="center">集合</td><td align="center">f=open(‘data.dat’,’r’)</td></tr><tr><td align="center">布尔型</td><td align="center">True,False</td></tr><tr><td align="center">空类型</td><td align="center">None</td></tr><tr><td align="center">编程单元类型</td><td align="center">函数、模块、类</td></tr></tbody></table><h3 id="1-4-2-Python变量"><a href="#1-4-2-Python变量" class="headerlink" title="1.4.2 Python变量"></a>1.4.2 Python变量</h3><p>• 不需要事先声明变量名及其类型</p><p>• 直接赋值即可创建各种类型的对象变量</p><p>内置函数type()用来返回变量类型</p><p>isinstance()用来测试对象是否为指定类型的实例</p><p>id()用来返回变量所指值的内存地址</p><pre class=" language-python"><code class="language-python">x<span class="token operator">=</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span>int<span class="token punctuation">)</span>id<span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p><strong>• Python采用基于值的内存管理方式</strong></p><p>• Python如果为不同变量赋值为相同值，这个值在内存中只有一份，多个变量指向同一块内存地址</p><h3 id="1-4-3-数字"><a href="#1-4-3-数字" class="headerlink" title="1.4.3 数字"></a>1.4.3 数字</h3><p>• 数字：python中最常用的不可变对象</p><p>• 可以表示任意大小的数字</p><h3 id="1-4-4-字符串"><a href="#1-4-4-字符串" class="headerlink" title="1.4.4 字符串"></a>1.4.4 字符串</h3><p>• 用单引号、双引号或三引号括起来的符号系列称为字符串</p><p>• 单引号、双引号、三单引号、三双引号可以互相嵌套，用来表示复杂字符串。</p><p>‘abc’、’123’、’中国’、”Python”</p><p>• 字符串属于不可变序列</p><p>• 空串表示为’’或 “”</p><p>• 三引号’’’或”””表示的字符串可以换行</p><p>• 三引号’’’或”””可以在程序中表示较长的注释</p><h3 id="1-4-5-操作符和表达式"><a href="#1-4-5-操作符和表达式" class="headerlink" title="1.4.5 操作符和表达式"></a>1.4.5 操作符和表达式</h3><table><thead><tr><th align="center">运算符示例</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">x//y</td><td align="center">求整商</td></tr><tr><td align="center">x**y</td><td align="center">幂运算</td></tr><tr><td align="center">x in y；x not in y</td><td align="center">成员测试运算符</td></tr><tr><td align="center">x is y；x is not y</td><td align="center">对象实体同一性测试（地址）</td></tr><tr><td align="center">&amp;、|、^</td><td align="center">集合交集、并集、对称差集</td></tr></tbody></table><p>在Python中逗号”，”并不是运算符，而只是一个普通分隔符。</p><pre class=" language-python"><code class="language-python"><span class="token string">'a'</span> <span class="token keyword">in</span> <span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token comment" spellcheck="true"># (False,'a')</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token comment" spellcheck="true"># (3,5)</span></code></pre><h3 id="1-4-6-常用内置函数"><a href="#1-4-6-常用内置函数" class="headerlink" title="1.4.6 常用内置函数"></a>1.4.6 常用内置函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">chr(x)</td><td align="center">返回ASCII编码或Unicode编码为x的字符</td></tr><tr><td align="center">dir(x)</td><td align="center">返回指定对象或模块的成员列表</td></tr><tr><td align="center">help(obj)</td><td align="center">返回对象obj或模块的帮助信息</td></tr><tr><td align="center">eval()</td><td align="center">计算字符串中表达式的值并返回</td></tr><tr><td align="center">isinstance(obj,type)</td><td align="center">测试对象是否属于指定类型的实例</td></tr><tr><td align="center">len(obj)</td><td align="center">返回对象obj包含的元素个数</td></tr><tr><td align="center">map(函数，序列)</td><td align="center">将单参数函数映射至序列中每个元素，返回map对象</td></tr><tr><td align="center">ord(s)</td><td align="center">返回一个字符s的ASCII码</td></tr><tr><td align="center">pow(x,y)</td><td align="center">返回x的y次方，等价于x**y</td></tr><tr><td align="center">range([start,]end[,step])</td><td align="center">返回一个等差数列列表(py3.x返回一个range对象)，不包括终值</td></tr><tr><td align="center">reduce(函数，序列)</td><td align="center">将接受2个参数的函数以累积的方式从左到右依次应用至序列中每个元素，最终返回单个值作为结果</td></tr><tr><td align="center">reversed(列表或元组)</td><td align="center">返回逆序后的迭代器对象</td></tr><tr><td align="center">round(x[,小数位数])</td><td align="center">对x进行四舍五入，若不指定小数位数，则返回整数</td></tr><tr><td align="center">sorted(列表[,reverse])</td><td align="center">返回排序后的列表</td></tr><tr><td align="center">zip(seq1[,seq2[…]])</td><td align="center">返回zip对象</td></tr></tbody></table><h3 id="1-4-7-对象的删除"><a href="#1-4-7-对象的删除" class="headerlink" title="1.4.7 对象的删除"></a>1.4.7 对象的删除</h3><ul><li>Python自动内存管理功能：<ul><li>解释器跟踪所有值，没有变量指向的自动删除</li><li>自动内存管理不保证及时释放内存</li><li>显示释放申请的资源是程序员的好习惯和素养</li></ul></li><li>del命令<ul><li>显示删除对象</li><li>解除与值之间的指向关系</li></ul></li></ul><h3 id="1-4-8-基本输入输出"><a href="#1-4-8-基本输入输出" class="headerlink" title="1.4.8 基本输入输出"></a>1.4.8 基本输入输出</h3><p>在Python中，使用内置函数input()来接受用户的键盘输入，input()函数的一般用法为</p><pre class=" language-python"><code class="language-python">x<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'提示：'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span></code></pre><p>输出内容之后不换行</p><h3 id="1-4-9-模块导入与使用"><a href="#1-4-9-模块导入与使用" class="headerlink" title="1.4.9 模块导入与使用"></a>1.4.9 模块导入与使用</h3><ol><li>import 模块名[as 别名]</li><li>from 模块名 import 对象名[as 别名]</li></ol><h2 id="第2章-Python序列"><a href="#第2章-Python序列" class="headerlink" title="第2章 Python序列"></a>第2章 Python序列</h2><ul><li><p>序列: 一系列相关的按一定顺序排列的值 </p></li><li><p>序列是程序设计中经常用到的数据存储方式</p></li><li><p>Python提供的序列类型最丰富，最灵活，功能最强大</p></li><li><p>Python序列结构：列表、元组、字典、字符串、集合、range</p></li><li><p>列表、元组、字符串等序列均支持双向索引 </p><p>第一个元素下标为0，第二个元素下标为1，以此类推； </p><p>最后一个元素下标为-1，倒数第二个元素下标为-2，以此类推</p></li></ul><h3 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h3><ul><li>内置可变序列 </li><li>若干元素的有序集合 </li><li>列表中的每一个数据称为元素 </li><li>列表的所有元素放在一对中括号“[”和“]”中，并使用逗号分隔开 </li></ul><p><strong>列表元素增加或删除:</strong> </p><ul><li>对象自动进行扩展或收缩内存，保证元素之间没有缝隙 </li></ul><p><strong>列表中的数据类型可以各不相同:</strong> </p><ul><li><p>可以同时分别为整数、实数、字符串等基本类型 </p></li><li><p>可以是列表、元素、字典、集合以及其他自定义类型的对象</p><p>[10, 20, 30, 40] [‘spam’, 2.0, 5, [10, 20]]</p><p>[‘crunchy frog’, ‘ram bladder’, ‘lark vomit’]</p><p>[[‘file1’, 200,7], [‘file2’, 260,9]]</p></li></ul><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>list.append(x)</strong></td><td align="center">将元素x添加至列表尾部</td></tr><tr><td align="center"><strong>list.extend(L)</strong></td><td align="center">将列表L中所有元素添加至列表尾部</td></tr><tr><td align="center"><strong>list.insert(index, x)</strong></td><td align="center">在列表指定位置index处添加元素x</td></tr><tr><td align="center"><strong>list.remove(x)</strong></td><td align="center">在列表中删除首次出现的指定元素</td></tr><tr><td align="center"><strong>list.pop([index])</strong></td><td align="center">删除并返回列表对象指定位置的元素</td></tr><tr><td align="center"><strong>list.index(x)</strong></td><td align="center">返回值为x的首个元素的下标</td></tr><tr><td align="center"><strong>list.count(x)</strong></td><td align="center">返回指定元素x在列表中的出现次数</td></tr><tr><td align="center"><strong>list.reverse()</strong></td><td align="center">对列表元素进行原地逆序</td></tr><tr><td align="center"><strong>list.sort()</strong></td><td align="center">对列表元素进行原地排序</td></tr></tbody></table><p><strong>删除列表中指定元素的所有重复</strong></p><p>由于Python会自动对列表进行收缩并移动列表元素</p><p>应该使用切片来避免：</p><pre class=" language-python"><code class="language-python">x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>也可以使用从后向前的顺序来删除列表中的重复元素</p><pre class=" language-python"><code class="language-python">x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>，<span class="token operator">-</span><span class="token number">1</span>，<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span></code></pre><h4 id="2-1-6-切片操作"><a href="#2-1-6-切片操作" class="headerlink" title="2.1.6 切片操作"></a>2.1.6 切片操作</h4><p>切片使用2个冒号分隔的3个数字来完成：第一个数字表示切片开始位置(默认为0)，第二个数字表示切片截止(但不包含)位置(默认为列表长度)，第三个数字表示切片的步长(默认为1)。</p><p><strong>切片操作不会因为下标越界而抛出异常</strong></p><ul><li>可以使用切片来截取列表中的任何部分</li><li>可以通过切片来修改和删除列表中部分元素</li><li>可以通过切片操作为增加元素</li></ul><p><strong>不影响列表对象内存地址</strong></p><p><strong>切片返回的是列表元素的浅复制，与列表对象的直接赋值并不一样</strong></p><pre class=" language-python"><code class="language-python">aList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>aList<span class="token punctuation">)</span><span class="token punctuation">)</span>bList<span class="token operator">=</span>aList<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>bList<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="2-1-7-列表排序"><a href="#2-1-7-列表排序" class="headerlink" title="2.1.7 列表排序"></a>2.1.7 列表排序</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomrandom<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>aList<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打乱顺序</span>aList<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#默认为升序排列</span>aList<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#降序排列</span>aList<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#自定义排序</span></code></pre><p>内置函数sorted()返回新列表，并不对原列表进行任何修改</p><p>内置函数reversed()不对原列表做任何修改，而是返回一个逆序排列后的<strong>迭代对象</strong></p><pre class=" language-python"><code class="language-python">aList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>newList<span class="token operator">=</span>reversed<span class="token punctuation">(</span>aList<span class="token punctuation">)</span>list<span class="token punctuation">(</span>newList<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使用第一次</span><span class="token keyword">for</span> i <span class="token keyword">in</span> newList<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#没有输出</span></code></pre><p>在之前的list()函数执行时，迭代器对象已遍历结束，需要<strong>重新创建迭代对象</strong>才能再次访问其内容。</p><p>max、sum(列表)默认对字典“键”进行计算，如果需要对字典”值”进行计算，则需要使用字典的**values()**方法明确说明</p><p>**zip(列表1，列表2，…)**：将多个列表或元组对应位置的元素组合为元组，并返回包含这些元组的zip对象</p><pre class=" language-python"><code class="language-python">aList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>bList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>cList<span class="token operator">=</span>zip<span class="token punctuation">(</span>aList<span class="token punctuation">,</span>bList<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#zip对象</span>list<span class="token punctuation">(</span>cList<span class="token punctuation">)</span></code></pre><p><strong>enumerate(列表)</strong></p><p>枚举列表、元组或其他可迭代对象的元素，返回枚举对象，枚举对象中每个元素是否含<strong>下标</strong>和<strong>元素值</strong>的<strong>元组</strong>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>cList<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''(0,(1,4))(1,(2,5))(2,(3,6))'''</span> </code></pre><h4 id="2-1-9-列表推导式"><a href="#2-1-9-列表推导式" class="headerlink" title="2.1.9 列表推导式"></a>2.1.9 列表推导式</h4><p>aList=[v.strip() for v in freshfruit]等价于下面的代码：</p><pre class=" language-python"><code class="language-python">freshfruit<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">' banana '</span><span class="token punctuation">,</span><span class="token string">' apple  '</span><span class="token punctuation">]</span>freshfruit<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">.</span>strip<span class="token punctuation">,</span>freshfruit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>freshfruit<span class="token punctuation">)</span><span class="token punctuation">:</span>    freshfruit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>freshfruit<span class="token punctuation">)</span></code></pre><ol><li><p>使用列表推导式实现嵌套列表的平铺</p><pre class=" language-python"><code class="language-python">vec<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>num <span class="token keyword">for</span> elem <span class="token keyword">in</span> vec <span class="token keyword">for</span> num <span class="token keyword">in</span> elem<span class="token punctuation">]</span></code></pre></li><li><p>过滤不符合条件的元素</p><ul><li>列出当前文件夹下所有Python源文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">[</span>filename <span class="token keyword">for</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> filename<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.py'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></li><li><p>在列表推导式中使用多个循环，实现多序列元素的任意组合，并且可以结合条件语句过滤特点元素</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></li><li><p>使用列表推导式实现矩阵转置</p><pre class=" language-python"><code class="language-python">matrix<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> matrix<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>也可以使用内置函数zip()和list()来实现矩阵转置：</p><pre class=" language-python"><code class="language-python">list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>列表推导式中可以使用函数或复杂表达式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> v<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        v<span class="token operator">=</span>v<span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        v<span class="token operator">=</span>v<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> v<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> v<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>v<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">if</span> v<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> v<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> v<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>列表推导式支持文件对象迭代</p></li><li><p>使用列表推导式生成100以内的所有素数</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>p<span class="token operator">%</span>d <span class="token keyword">for</span> d <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre></li></ol><h4 id="2-1-10-使用列表实现向量运算"><a href="#2-1-10-使用列表实现向量运算" class="headerlink" title="2.1.10 使用列表实现向量运算"></a>2.1.10 使用列表实现向量运算</h4><p>在Python中，列表支持与整数的乘法运算，表示列表元素进行重复并生成新列表，不对原列表进行任何修改。不支持与整数的加减除运算，也不支持列表之间的减乘除操作。</p><h3 id="2-2-元组"><a href="#2-2-元组" class="headerlink" title="2.2 元组"></a>2.2 元组</h3><h4 id="2-2-1-元组的创建与删除"><a href="#2-2-1-元组的创建与删除" class="headerlink" title="2.2.1 元组的创建与删除"></a>2.2.1 元组的创建与删除</h4><p>如果要创建只包含一个元素的元组，只把元素放在圆括号里是不行的，还需要在元素后面加一个逗号“，”，而创建包含多个元素的元组则没有这个限制。</p><pre class=" language-python"><code class="language-python">a_tuple<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>a_tuple<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span>s<span class="token operator">=</span>tuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#空元组</span></code></pre><p>对于元组而言，只能使用del命令删除整个元组对象，而不能只删除元组中的部分元素，因为元组属于不可变序列。</p><p><strong>元组的访问和处理速度比列表更快。可用作字典的键。</strong></p><h4 id="2-2-2-元组与列表的区别"><a href="#2-2-2-元组与列表的区别" class="headerlink" title="2.2.2 元组与列表的区别"></a>2.2.2 元组与列表的区别</h4><ul><li>元组中的数据一旦定义就不允许更改。 </li><li>元组没有append()、extend()和insert()等方法，无法向元组中添加元素； </li><li>元组没有remove()或pop()方法，也无法对元组元素进行del操作，不能从元组中删除元素。 </li><li>内建的tuple( )函数接受一个列表参数，并返回一个包含同样元素的元组，而list( )函数接受一个元组参数并返回一个列表。从效果上看，tuple( )冻结列表，而list( )融化元组。</li></ul><h4 id="2-2-3-序列解包"><a href="#2-2-3-序列解包" class="headerlink" title="2.2.3 序列解包"></a>2.2.3 序列解包</h4><ul><li><p>可以使用序列解包功能对多个变量同时赋值 </p><pre class=" language-python"><code class="language-python">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span></code></pre></li><li><p>序列解包对于列表和字典同样有效</p></li></ul><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token operator">=</span>as<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a':1,'b':2,'c':3&amp;#125;</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token operator">=</span>s<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p>使用序列解包可以很方便地同时遍历多个序列</p><pre class=" language-python"><code class="language-python">keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> zip<span class="token punctuation">(</span>key<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span></code></pre></li><li><p>在调用函数时，在实参前面加上一个星号(*)也可以进行序列解包，从而实现将序列中的元素值依次传递给相同数量的形参,</p></li><li><p>利用 * 表达式获取单个变量中的多个元素</p></li><li><p>* 获取的值默认为 list</p></li></ul><pre class=" language-python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token comment" spellcheck="true">#c=[2,3]</span>x<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;*&amp;#123;'a':1,'b':2&amp;#125;&amp;#125;</span>y<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;**&amp;#123;'a':1,'b':2&amp;#125;&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#&lt;class 'set'&gt;，&amp;#123;'b','a'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#&lt;class 'dict'&gt;</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token operator">**</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a':1,'c':3&amp;#125;,**&amp;#123;'b':2,'d':4&amp;#125;) #调用函数时参数序列解包</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'x':1,**&amp;#123;'y':2&amp;#125;&amp;#125;) #字典要用两个**</span></code></pre><h4 id="2-2-4-生成器推导式"><a href="#2-2-4-生成器推导式" class="headerlink" title="2.2.4 生成器推导式"></a>2.2.4 生成器推导式</h4><ul><li>生成器推导式使用圆括号，列表推导式使用方括号 </li><li><strong>生成器推导式的结果是一个生成器对象，不是列表或元组</strong> </li><li>生成器对象的元素可根据需要转化为列表或元组 </li><li>可以使用生成器对象的next()方法进行遍历 </li><li>可以直接将其作为迭代器对象来使用。 </li><li>不管用哪种方法访问其元素，当所有元素访问结束以后，如</li></ul><p>果需要重新访问其中的元素，必须重新创建该生成器对象。</p><pre class=" language-python"><code class="language-python">g<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(4,9,16,25)</span>tuple<span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#元素已经遍历结束 ()</span></code></pre><h3 id="2-3-字典"><a href="#2-3-字典" class="headerlink" title="2.3 字典"></a>2.3 字典</h3><ul><li>字典是键值对的<strong>无序可变</strong>集合 </li><li>字典元素的键和值用冒号分隔，元素之间用逗号分隔，所有的元素放在一对大括号“｛”和“｝”中 </li><li>字典中的每个元素包含两部分：键和值，向字典添加一个键的同时，必须为该键增添一个值。 </li><li>字典中的键可以为<strong>任意不可变数据</strong> </li><li>字典中的<strong>键不允许重复</strong></li><li>globals()返回包含当前作用域内所有<strong>全局变量</strong>和值的字典</li><li>locals()返回包含当前作用域内所有<strong>局部变量</strong>和值的字典</li></ul><h4 id="2-3-1-字典创建与删除"><a href="#2-3-1-字典创建与删除" class="headerlink" title="2.3.1 字典创建与删除"></a>2.3.1 字典创建与删除</h4><ul><li>使用=将一个字典赋值给一个变量 </li><li>使用dict利用已有数据创建字典： </li><li>使用dict根据给定的键、值创建字典 </li><li>以给定内容为键，创建值为空的字典 </li><li>使用del删除整个字典</li></ul><p><strong>给定内容为“键”，创建“值”为空的字典：</strong></p><pre class=" language-python"><code class="language-python">adict<span class="token operator">=</span>dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>adict<span class="token punctuation">)</span></code></pre><h4 id="2-3-2-字典元素的读取"><a href="#2-3-2-字典元素的读取" class="headerlink" title="2.3.2 字典元素的读取"></a>2.3.2 字典元素的读取</h4><ul><li>以键作为下标可以读取字典元素，若键不存在则抛出异常 </li><li>使用字典对象的get方法获取指定键对应的值，并且可以在键不存在的时候返回指定值。 </li></ul><pre class=" language-python"><code class="language-python">aDict<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'Dong','sex':'male'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>aDict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>aDict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">,</span><span class="token string">'abb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#abb</span></code></pre><ul><li>使用字典对象的items方法可以返回字典的键、值对列表  </li><li>使用字典对象的keys方法可以返回字典的键列表 </li><li>使用字典对象的values方法可以返回字典的值列表</li></ul><h4 id="2-3-3-字典元素的添加与修改"><a href="#2-3-3-字典元素的添加与修改" class="headerlink" title="2.3.3 字典元素的添加与修改"></a>2.3.3 字典元素的添加与修改</h4><ul><li>当以指定键为下标为字典赋值时，若键存在，则可以修改</li></ul><p>该键的值；若不存在，则表示添加一个键、值对</p><ul><li>使用字典对象的update方法将另一个字典的键、值对添加到当前字典对象 </li><li>使用del删除字典中指定键的元素 </li><li>使用字典对象的clear方法来删除字典中所有元素 </li><li>使用字典对象的pop 方法删除并返回指定键的元素 </li><li>使用字典对象的popitem方法删除并返回字典中的元素</li></ul><p>使用collections模块的Counter类可以统计元素次数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counterfrequences<span class="token operator">=</span>Counter<span class="token punctuation">(</span>z<span class="token punctuation">)</span>frequences<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回次数最多的</span>frequences<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回次数前三多的</span></code></pre><p><strong>字典推导式</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;i:str(i) for i in range(1,5)&amp;#125;</span><span class="token comment" spellcheck="true">#&amp;#123;1:'1',2:'2',3:'3',4:'4'&amp;#125;</span></code></pre><p><strong>有序字典</strong></p><pre class=" language-python"><code class="language-python">x<span class="token operator">=</span>collections<span class="token punctuation">.</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#有序字典</span></code></pre><h3 id="2-4-集合"><a href="#2-4-集合" class="headerlink" title="2.4 集合"></a>2.4 集合</h3><p>– 无序可变集合 </p><p>– 使用一对大括号界定 </p><p>– 元素不可重复</p><h4 id="2-4-1-集合的创建与删除"><a href="#2-4-1-集合的创建与删除" class="headerlink" title="2.4.1 集合的创建与删除"></a>2.4.1 集合的创建与删除</h4><ul><li><p>直接将集合赋值给变量 </p></li><li><p>使用del删除整个集合 </p></li><li><p>使用add()方法增加元素</p></li><li><p>使用集合对象的pop()方法 </p></li><li><p>使用集合对象的remove()方法 </p></li><li><p>使用集合对象的clear()方法清空集合</p></li></ul><h4 id="2-4-2-集合操作"><a href="#2-4-2-集合操作" class="headerlink" title="2.4.2 集合操作"></a>2.4.2 集合操作</h4><ul><li>交集、并集、差集等运算 (|,&amp;,-,^)</li><li>使用集合快速提取序列中单一元素</li></ul><p><strong>集合推导式</strong></p><h4 id="2-5-sorted"><a href="#2-5-sorted" class="headerlink" title="2.5 sorted()"></a>2.5 sorted()</h4><p>内置函数sorted()返回新的列表，并不对原列表做任何修改</p><p>可以对元组、字典排序，且借助于key参数可以实现更加复杂的排序</p><pre class=" language-python"><code class="language-python">persons<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'Dong','age':37&amp;#125;,&amp;#123;'name':'Zhang','age':40&amp;#125;,&amp;#123;'name':'Li','age':50&amp;#125;,&amp;#123;'name':'Dong','age':43&amp;#125;]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>persons<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&amp;#123;'name': 'Dong', 'age': 43&amp;#125;, &amp;#123;'name': 'Dong', 'age': 37&amp;#125;, &amp;#123;'name': 'Li', 'age': 50&amp;#125;, &amp;#123;'name': 'Zhang', 'age': 40&amp;#125;]</span></code></pre><p>使用key来指定排序依据，先按姓名升序排序，姓名相同的按年龄降序排序</p><h2 id="第3章-选择与循环"><a href="#第3章-选择与循环" class="headerlink" title="第3章 选择与循环"></a>第3章 选择与循环</h2><h3 id="3-1-条件表达式"><a href="#3-1-条件表达式" class="headerlink" title="3.1 条件表达式"></a>3.1 条件表达式</h3><p>• 算术运算符：+、-、<em>、/、//、%、</em>*</p><p>• 关系运算符：&gt;、&lt;、==、&lt;=、&gt;=、!=</p><p>• 测试运算符：in、not in、is、is not</p><p>• 逻辑运算符：and、or、not，注意短路求值</p><p>• 位运算符：~、&amp;、|、 ^、 &lt;&lt;、&gt;&gt;</p><p>• 几乎所有的Python合法表达式都可以作为条件表达式，包括含有函数调用的表达式。</p><p>• 条件表达式的值只要不是False、0（或0.0、0j等）、空值None、空列表、空元组、空集合、空字典、空字符串、空range对象或其他空迭代对象，Python解释器均认为与True等价。</p><p>• 特殊逻辑运算符“and”和“or”：短路求值或惰性求值</p><p>• 设计条件表达式表示复杂条件时巧用“and”和“or”(如果能够大概预测不同条件失败的概率)提高程序效率，减少不必要的计算与判断</p><p>• “and”例:“表达式1 and 表达式2”</p><p>if“表达式1”=“False”，不论“表达式2”的值是什么，整个表达式的值都是“False”</p><p>• Python条件表达式中不允许使用赋值运算符“=”</p><h3 id="3-2-选择结构"><a href="#3-2-选择结构" class="headerlink" title="3.2 选择结构"></a>3.2 选择结构</h3><p>• Python双分支表达式：</p><p>value1 if condition else value2</p><p>–condition的值与True等价时，表达式的值为value1</p><p>–否则表达式的值为value2</p><p>–value1和value2中可以使用复杂表达式如函数调用</p><p>–双分支结构的表达式具有惰性求值的特点</p><p>• Python多分支结构：</p><p>if 表达式1:</p><p>语句块1</p><p>elif 表达式2:</p><p>语句块2</p><p>elif 表达式3:</p><p>语句块3</p><p>else:</p><p>语句块4</p><p>关键字elif是else if的缩写</p><h3 id="3-3-循环结构"><a href="#3-3-循环结构" class="headerlink" title="3.3 循环结构"></a>3.3 循环结构</h3><p>• Python基本的循环语句——while语句、for语句</p><p>• while循环一般用于循环次数难以提前确定的情况</p><p>• for循环一般用于循环次数可以提前确定的情况</p><p>• 优先考虑使用for循环</p><p>• 循环结构之间可以互相嵌套</p><p><strong>• 循环语句语法</strong></p><p>while 表达式:</p><p>循环体</p><p>for 取值 in 序列或迭代对象:</p><p>循环体</p><p><strong>• 循环的else子句</strong></p><p>循环自然结束时执行else结构中的语句</p><p>while 表达式: </p><p>​    循环体</p><p>else：</p><p>​    else子句</p><p>for 取值 in 序列或迭代对象: </p><p>​    循环体</p><p>else：</p><p>​    else子句</p><ul><li>编写循环语句时，减少循环内部不必要的计算 </li><li>与循环变量无关的代码提取到循环之外 </li><li>使用多重循环嵌套减少内层循环中不必要的计算</li><li>循环中尽量引用局部变量，查询和访问速度比全局变量略块</li></ul><h3 id="3-4-break和continue语句"><a href="#3-4-break和continue语句" class="headerlink" title="3.4 break和continue语句"></a>3.4 break和continue语句</h3><p>• break语句在while循环和for循环中使用</p><p>一般放在if选择结构中，使得整个循环提前结束</p><p>• continue语句的作用是终止当前循环</p><p>并忽略continue之后的语句，提前进入下一次循环 </p><p>• 除非break语句让代码更简单或更清晰，否则不要轻易使用</p><p>在循环中应尽量使用局部变量，因为局部变量的查询和访问速度比全局变量略快；在使用模块中的方法时，可以通过将其转换为局部变量来提高运行速度。</p><p>总结：</p><ol><li>几乎所有合法的Python表达式都可以作为选择结构和循环结构中的条件表达式</li><li>Python的关系运算符可以连续使用，例如3&lt;4&lt;5&gt;2的值为True</li></ol><h2 id="第4章-字符串与正则表达式"><a href="#第4章-字符串与正则表达式" class="headerlink" title="第4章 字符串与正则表达式"></a>第4章 字符串与正则表达式</h2><p><strong>Python中字符串</strong></p><p>• 属于序列类型</p><p>• 支持序列通用方法和切片操作</p><p>• 支持特有的字符串操作方法</p><p>• 字符串属于不可变序列类型</p><h3 id="Python字符串驻留机制"><a href="#Python字符串驻留机制" class="headerlink" title="Python字符串驻留机制"></a><strong>Python字符串驻留机制</strong></h3><p>• 短字符串赋给多个对象时，内存中只有一个副本</p><p>• 长字符串不遵守驻留机制</p><p>• 判断一个变量s是否为字符串</p><p>• 使用isinstance ( s, basestring )</p><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><img src="D:\typora\picture\计组2\字符串格式化.png" style="zoom:50%;"><p>%s：字符串(str)</p><p>%r：字符串(repr)</p><p>%c：单个字符</p><p>%d：十进制整数    %o：八进制整数</p><p>%x：十六进制整数    %f：浮点数</p><h3 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h3><p><strong>• find( )、rfind()</strong></p><p>查找一个字符串在另一个字符串指定范围（默认是整个字符串）中首次和最后一次出现的位置，如果不存在则返回-1</p><pre class=" language-python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"apple,peach,banana,peach,pear"</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"peach"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回第一次出现的位置</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"peach"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从指定位置开始查找</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"peach"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从指定范围中查找</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从字符串尾部向前查找</span></code></pre><p><strong>• index()、rindex()</strong></p><p>返回一个字符串在另一个字符串指定范围中首次和最后一次出现的位置，如果不存在则抛出异常</p><pre class=" language-python"><code class="language-python">s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回首次出现位置</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'pe'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回最后一次出现的位置</span></code></pre><p><strong>• count()</strong></p><p>返回一个字符串在另一个字符串中出现的次数</p><pre class=" language-python"><code class="language-python">s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#统计子字符串出现次数</span></code></pre><p><strong>• split()、rsplit()</strong></p><p>用来以指定字符为分隔符，将字符串左端和右端开始将其分割成多个字符串，并返回包含分割结果的<strong>列表</strong></p><ul><li>如果不指定分隔符，则字符串中的任何空白符号(包括空格、换行符、制表符等)都被认为是分隔符</li><li>还允许指定最大分割次数</li></ul><pre class=" language-python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"apple,peach,banana,pear"</span>li<span class="token operator">=</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#使用逗号分割</span><span class="token comment" spellcheck="true">#["apple","peach","banana","pear"]</span>s<span class="token operator">=</span><span class="token string">'\n\nhello\t\t world \n\n My name\t is Dong '</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span>None<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['hello','world','My name is Dong ']</span>s<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span>None<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['\n\nhello\t\t world \n\n\n My name','is','Dong']</span></code></pre><p><strong>• partition()、rpartition()</strong></p><p>指定字符串为分隔符将原字符串<strong>分割为3部分</strong>，即分隔符前的字符串、分隔符字符串、分隔符后的字符串，如果指定的分隔符不在原字符串中，<strong>则返回原字符串和两个空字符串</strong>。</p><pre class=" language-python"><code class="language-python">s<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'peach,banana,pear'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'apple,peach,banana'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">)</span></code></pre><p><strong>• join()</strong></p><p>与split()相反，join()方法用来将列表中多个字符串进行连接，并在相邻两个字符串之间插入指定字符</p><pre class=" language-python"><code class="language-python">li<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span><span class="token string">"peach"</span><span class="token punctuation">,</span><span class="token string">"banana"</span><span class="token punctuation">,</span><span class="token string">"pear"</span><span class="token punctuation">]</span>sep<span class="token operator">=</span><span class="token string">","</span>s<span class="token operator">=</span>sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#"apple,peach,banana,pear"</span></code></pre><p>• <strong>lower()、upper()、capitalize()、title()、swapcase()</strong></p><p>分别用来将字符串转换为小写、大写字符串、将字符串首字母变为大写、将每个单词的首字母变为大写以及大小写互换</p><p><strong>• replace()</strong></p><p>用来替换字符串中指定字符或子字符串的<strong>所有重复出现</strong>，每次只能替换一个字符或一个子字符串</p><p><strong>• maketrans()、translate()</strong></p><p>maketrans()方法用来生成字符映射表，而translate()方法则按映射表关系转换字符串并替换其中的字符，使用这两个方法的组合可以同时处理多个不同的字符。</p><pre class=" language-python"><code class="language-python">table<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'abcdef123'</span><span class="token punctuation">,</span><span class="token string">'uvwxyz@#$'</span><span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token string">"Python is a greate programming language. I like it!"</span>s<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#"Python is u gryuty progrumming lunguugy. I liky it!"</span></code></pre><p><strong>• strip()、rstrip()、lstrip()</strong></p><p>用来删除两端、右端或左端的空白字符或连续的指定字符</p><pre class=" language-python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"  abc  "</span>s2<span class="token operator">=</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#删除空白字符</span><span class="token string">"aaaaassddf"</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除指定字符</span><span class="token comment" spellcheck="true">#"ssddf"</span><span class="token string">"aaaassddfaaa"</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除字符串右端指定字符</span><span class="token comment" spellcheck="true">#'aaaassddf'</span><span class="token string">"aaaassddfaaa"</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除字符串左端指定字符</span><span class="token comment" spellcheck="true">#'ssddfaaa'</span></code></pre><p><strong>• eval()</strong></p><p>内置函数eval()尝试把任意字符串转化为Python表达式并求值</p><p><strong>• 关键字in</strong></p><p>与列表、元组、字典、集合一样，也可以使用关键字in和not in来判断一个字符串是否出现在另一个字符串中，返回True或False</p><p><strong>• startswith()、endswith()</strong></p><p>用来判断字符串是否以指定字符串开始或结束。这两个方法可以接收两个整数参数来限定字符串的检测范围。</p><pre class=" language-python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"Beautiful is better than ugly."</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Be'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#True</span></code></pre><p><strong>• isalnum()、isalpha()、isdigit()、isspace()、isupper()、islower()</strong></p><p>用来测试字符串是否为数字或字母、是否为字母、是否为数字字符、是否为空白字符、是否为大写字母以及是否为小写字母。</p><p><strong>• center()、ljust()、rjust()</strong></p><p>返回指定宽度的新字符串，原字符串<strong>居中、左对齐或右对齐</strong>出现在新字符串中，如果指定的宽度大于字符串长度，则使用指定的字符(默认为空格)填充。</p><pre class=" language-python"><code class="language-python"><span class="token string">'Hello world!'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#'    Hello world!   '</span><span class="token string">'Hello world!'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#'====Hellow world!===='</span><span class="token string">'Hello world!'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#'Hello world!========'</span><span class="token string">'Hello world!'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#'========Hello world!'</span></code></pre><p><strong>• 字符串常量</strong></p><p> import <strong>string</strong></p><p>string.<strong>digits</strong>——‘0123456789’</p><p>string.<strong>punctuation</strong>——‘!”#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~’</p><p>string.<strong>letters</strong>——‘ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz’</p><p>string.<strong>printable</strong>——‘0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRS</p><p>TUVWXYZ!”#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~\t\n\r\x0b\x0c’</p><p>string.<strong>lowercase</strong>——‘abcdefghijklmnopqrstuvwxyz’ </p><p>string.<strong>uppercase</strong>——‘ABCDEFGHIJKLMNOPQRSTUVWXYZ’</p><p> <strong>random标准库</strong></p><p>choice()用于从序列中任意选择一个元素的函数</p><p>getrandbits()用于生成指定二进制位数的随机整数的函数</p><p>randrange()和randint()生成指定范围内随机数的函数</p><p>shuffle()列表原地乱序函数</p><p>sample()从序列中随机选择指定数量不重复元素的函数</p><h3 id="4-2-正则表达式"><a href="#4-2-正则表达式" class="headerlink" title="4.2 正则表达式"></a>4.2 正则表达式</h3><p>• 正则表达式</p><p>字符串处理的有力工具和技术</p><p>• 正则表达式原理</p><p>使用预定义模式去匹配一类具有共同特征的字符串</p><p>处理字符串：快速、准确地完成复杂的查找、替换等</p><p>• Python中<strong>re</strong>模块提供了正则表达式操作所需要的功能。</p><p>.：匹配除换行符以外的任意单个字符</p><p>*：匹配位于 *之前的0个或多个字符</p><p>+：匹配位于+之前的一个或多个字符</p><p>|：匹配位于|之前或之后的字符</p><p>^：匹配行首，匹配以^后面的字符开头的字符串</p><p>$：匹配行尾，匹配以$之前的字符结束的字符串</p><p>?：匹配位于?之前的0个或1个字符</p><p>\：表示位于\之后的为转义字符</p><p>[]：匹配位于[]中的任意一个字符</p><p>-：用在[]之内用来表示范围</p><p>()：将位于()内的内容作为一个整体来对待</p><p>{}：按{}中的次数进行匹配</p><p>\b：匹配单词头或单词尾</p><p>\B：与\b含义相反</p><p>\d：匹配任何数字，相当于[0-9]</p><p>\D：与\d含义相反</p><p>\s：匹配任何空白字符</p><p>\S：与\s含义相反</p><p>\w：匹配任何字母、数字以及下划线，相当于[a-zA-Z0-9_]</p><p>\W：与\w含义相反</p><h3 id="re模块的主要方法"><a href="#re模块的主要方法" class="headerlink" title="re模块的主要方法"></a>re模块的主要方法</h3><p>• compile(pattern[,flags]):创建模式对象</p><p>• search(pattern,string[,flags]):寻找模式</p><p>• match(pattern,string[,flags]):匹配模式</p><p>• findall(pattern,string[,flags]):列出模式的所有匹配项</p><p>• split(pattern,string[,maxsplit=0]):分割字符串</p><p>• sub(pat,repl,string[,count=0]):用repl替换pat的匹配项</p><p>• escape(string):将字符串中所有特殊正则表达式字符转义</p><p>flags值的说明：</p><table><thead><tr><th>re.I</th><th>忽略大小写</th><th>re.L/re.M</th><th>多行匹配模式</th></tr></thead><tbody><tr><td>re.S</td><td>使元字符.匹配任意字符，包括换行符</td><td>re.U</td><td>匹配Unicode字符</td></tr><tr><td>re.X</td><td>忽略模式中的空格，并可以使用#注释</td><td>使用”|”进行组合</td><td></td></tr></tbody></table><h3 id="子模式与match对象"><a href="#子模式与match对象" class="headerlink" title="子模式与match对象"></a>子模式与match对象</h3><p>• 使()表示一个子模式， ()内的内容作为一个整体出现</p><p>• 正则表达式对象的match方法和search方法匹配成功后返回</p><p>match对象。</p><p>• match对象的主要方法</p><p>group()、groups()、groupdict()、start()、end()、</p><p>span()等等。</p><h3 id="使用正则表达式对象"><a href="#使用正则表达式对象" class="headerlink" title="使用正则表达式对象"></a>使用正则表达式对象</h3><p>• 使用使用re模块的compile()方法将正则表达式编译生成</p><p>正则表达式对象,编译后的正则表达式对象可以提高字符</p><p>串处理速度</p><p>• 使用正则表达式对象提供的方法进行字符串处理</p><p>•match(string[, pos[, endpos]]):在字符串开头或指定</p><p>位置进行搜索，模式必须出现在字符串开头或指定位置</p><p>•search(string[, pos[, endpos]]):搜索；</p><p>•findall(string[, pos[, endpos]]):在字符串中查找所</p><p>有符合正则表达式的字符串列表。</p><h2 id="第5章-函数设计与使用"><a href="#第5章-函数设计与使用" class="headerlink" title="第5章 函数设计与使用"></a>第5章 函数设计与使用</h2><p>• 将可能需要反复执行的代码封装为函数， </p><p>• 在需要该段代码功能的地方调用实现代码的复用 </p><p>• 保证代码的一致性 </p><p>• 修改函数代码所有调用均受到影响</p><h3 id="5-2-形参与实参"><a href="#5-2-形参与实参" class="headerlink" title="5.2 形参与实参"></a>5.2 形参与实参</h3><p>• 函数定义时括弧内为形参，一个函数可以没有形参，但是括</p><p>弧必须要有，表示该函数不接受参数 </p><p>• 函数调用时向其传递实参，将实参的值或引用传递给形参 </p><p>• 在函数内直接修改形参的值不影响实参</p><p>如果传递给函数的是Python的可变序列，并且在函数内部使用下标或其他方式为可变序列增加、删除元素或修改元素值时，修改后的结果时可以反映到函数之外的，即实参也得到相应的修改。</p><h3 id="5-3-参数类型"><a href="#5-3-参数类型" class="headerlink" title="5.3 参数类型"></a>5.3 参数类型</h3><p>• Python函数参数类型：普通参数、默认值参数、关键参数、</p><p>可变长度参数等等。</p><p>• Python定义函数时不需要指定参数的类型，也不需要指定函</p><p>数的类型，完全由调用者决定，类似于<strong>重载和泛型</strong> </p><p>• 函数编写如果有问题，只有在调用时才能被发现，传递某些</p><p>参数时执行正确，而传递另一些类型的参数时则出现错误</p><h4 id="默认值参数"><a href="#默认值参数" class="headerlink" title="默认值参数"></a>默认值参数</h4><p>def 函数名(形参名=默认值，……)</p><p>函数体 </p><p>• <strong>默认值参数必须出现在函数参数列表的最右端</strong> </p><p>• <strong>任何一个默认值参数右边不能有非默认值参数</strong></p><p>• 多次调用函数并且不为默认值参数传递值时，默认值参数只在第一次调用时进行解释。</p><h4 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h4><p>• 关键参数：调用函数时的传递参数的方式</p><p>通过关键参数传递，实参顺序可以和形参顺序不一致</p><h4 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="可变长度参数"></a>可变长度参数</h4><p>两种形式：*parameter和**parameter</p><p>前者用来接收任意多个实参并将其放在一个<strong>元组</strong>中，后者接收类似于关键参数一样显示赋值形式的多个实参并将其放入<strong>字典</strong>中。</p><h4 id="参数传递时的序列解包"><a href="#参数传递时的序列解包" class="headerlink" title="参数传递时的序列解包"></a>参数传递时的序列解包</h4><p>在实参名称前加一个星号，Python解释器将自动进行解包，然后传递给多个单变量形参。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span>seq<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>demo<span class="token punctuation">(</span><span class="token operator">*</span>seq<span class="token punctuation">)</span>tup<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token operator">*</span>tup<span class="token punctuation">)</span>set1<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1,2,3&amp;#125;</span>demo<span class="token punctuation">(</span><span class="token operator">*</span>set1<span class="token punctuation">)</span>dic<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1:'a',2:'b',3:'c'&amp;#125;</span>demo<span class="token punctuation">(</span><span class="token operator">*</span>dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="5-4-return语句"><a href="#5-4-return语句" class="headerlink" title="5.4 return语句"></a>5.4 return语句</h3><p>• 从一个函数中返回，即跳出函数 </p><p>• 从函数中返回一个值 </p><p>• 没有return语句，Python以return None结束</p><h3 id="5-5-变量作用域"><a href="#5-5-变量作用域" class="headerlink" title="5.5 变量作用域"></a>5.5 变量作用域</h3><ol><li>一个变量已在函数外定义，如果在函数内需要修改这个变量的值，并将这个赋值结果反映到函数之外，可以在函数内用global声明这个变量为全局变量。</li><li>在函数内部直接使用global关键字将一个变量声明为全局变量，即使在函数外没有定义该全局变量，在调用这个函数之后，将自动增加新的全局变量。</li></ol><h3 id="5-6-lambda表达式"><a href="#5-6-lambda表达式" class="headerlink" title="5.6 lambda表达式"></a>5.6 lambda表达式</h3><p>• 可以用来声明匿名函数，即没有函数名字的临时使用的小函数 </p><p>• 只可以包含一个表达式，且该表达式的计算结果为函数的返回值 </p><p>• 不允许包含其他复杂的语句，但在表达式中可以调用其他函数</p><pre class=" language-python"><code class="language-python">f<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n<span class="token operator">*</span>na_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>demo<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>a_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[1,4,9,16,25]</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>在使用lambda表达式，要注意变量作用域带来的问题，在下面的代码中变量x是在外部作用域中定义的，对lambda表达式而言不是局部变量，从而导致出现了错误。</p><pre class=" language-python"><code class="language-python">r<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token keyword">lambda</span> n<span class="token operator">=</span>x<span class="token punctuation">:</span>n<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#换名</span></code></pre><h3 id="5-8-高级话题"><a href="#5-8-高级话题" class="headerlink" title="5.8 高级话题"></a>5.8 高级话题</h3><ul><li><p>内置函数map:将一个函数作用到一个序列或迭代器对象上，并返回一个map对象作为结果，该函数不对原序列或迭代器对象做任何修改</p></li><li><p>reduce()可以将一个接受2个参数的函数以累积的方式从左到右依次作用到一个序列或迭代器对象的所有元素上。</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduceseq<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">,</span>seq<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>yreduce<span class="token punctuation">(</span>add<span class="token punctuation">,</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>filter()</p><p>将一个函数作用到一个序列上，返回该序列中使得该函数返回值为True的那些元素组成的列表、元组或字符串。</p><pre class=" language-python"><code class="language-python">seq<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'x41'</span><span class="token punctuation">,</span><span class="token string">'?!'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>func<span class="token punctuation">,</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['foo','x41']</span></code></pre></li><li><p>yield()</p><p>Yield语句创建生成器：惰性求值，可迭代(适用于大数据处理)</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> a        a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>ba<span class="token operator">=</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span></code></pre><h2 id="第6章-面向对象程序设计"><a href="#第6章-面向对象程序设计" class="headerlink" title="第6章 面向对象程序设计"></a>第6章 面向对象程序设计</h2><p>面向对象程序设计：<strong>合理地定义和组织类以及类之间的关系</strong></p><p>• Python真正面向对象的高级动态编程语言</p><p>• Python完全支持面向对象的基本功能：</p><p>封装、继承、多态以及对基类方法的覆盖或重写</p><p>• Python对象的概念广泛，一切皆对象</p><p>• Python对象不一定必须是某个类的实例：</p><p>字符串、列表、字典、元组等内置数据类型 </p><p>• 类的成员：</p><p>成员属性：用变量形式表示的对象</p><p>成员方法：用函数形式表示的对象</p><h3 id="类的定义与使用"><a href="#类的定义与使用" class="headerlink" title="类的定义与使用"></a>类的定义与使用</h3><p>• Python类定义</p><p>• class关键字+空格+类名+冒号 </p><p>• 类名的首字母一般要大写</p><p>class Car:</p><p>def infor(self):</p><p>print(“ This is a car “) </p><p>• 类用来实例化对象，通过“对象名.成员” 访问数据和成员</p><p>&gt;&gt;&gt; car = Car()</p><p>&gt;&gt;&gt; car.infor()</p><p>This is a car </p><p>• 使用内置方法isinstance()来测试对象是否为某个类的实例</p><p>&gt;&gt;&gt; isinstance(car, Car)</p><p>True</p><p>&gt;&gt;&gt; isinstance(car, str)</p><p>False</p><p>• Python关键字“pass” </p><p>• 类似于空语句，使用该关键字来“占位” </p><p>• 在类和函数的定义中或者选择结构中为软件升级预留空间</p><p>&gt;&gt;&gt; class A:</p><p>pass</p><p>&gt;&gt;&gt; def demo():</p><p>pass</p><p>&gt;&gt;&gt; if 5&gt;3:</p><p>pass</p><h3 id="self参数"><a href="#self参数" class="headerlink" title="self参数"></a>self参数</h3><p>• 类的所有实例方法都必须<strong>至少有一个 “self”的参数</strong> </p><p>• “self”参数必须是方法的第一个形参 </p><p>• “self”参数代表将来要创建的对象本身 </p><p>• 在类的实例方法中访问实例属性时需要以“self”为前缀 </p><p>• 在类外部用<strong>对象名</strong>调用对象方法时并<strong>不需要传递self参数</strong> </p><p>• 在类外部通过<strong>类名</strong>调用对象方法需要<strong>显式为self参数传值</strong></p><h3 id="类成员与实例成员"><a href="#类成员与实例成员" class="headerlink" title="类成员与实例成员"></a>类成员与实例成员</h3><p>• 类成员：指数据成员，或者广义上的属性 </p><p>• 属性有两种，一种是实例属性，另一种是类属性 </p><p>• 实例属性 </p><p>• 一般在构造函数__init__()中定义，使用时以self作为前缀 </p><p>• 实例属性属于实例(对象)，只能通过对象名访问 </p><p>• 类属性 </p><p>• 在类中所有方法之外定义的数据成员 </p><p>• 类属性属于类，可以通过类名或对象名访问 </p><p>• 类的方法中可调用类本身的其他方法，可访问类和对象属性 </p><p>• <strong>Python中可以动态地为类和对象增加成员</strong></p><h3 id="私有成员与公有成员"><a href="#私有成员与公有成员" class="headerlink" title="私有成员与公有成员"></a>私有成员与公有成员</h3><p>• 定义类的属性时，如果属性名以<strong>两个下划线“__”</strong>开头则</p><p>表示是私有属性，否则是公有属性。 </p><p>• 私有属性是为了数据封装和保密而设的属性，一般只能在</p><p>类的成员方法（类的内部）中使用访问，在类的外部不能</p><p>直接访问，需要通过调用对象的公有成员方法来访问 </p><p>• 公有属性是可以公开使用的，既可以在类的内部进行访问，</p><p>也可以在外部程序中使用。</p><p>• Python提供了访问私有属性的特殊方式，可用于程序的测</p><p>试和调试，对于成员方法也具有同样的性质。</p><p><strong>_xxx:保护成员</strong></p><p> <strong>__ xxx __:系统定义的特殊成员</strong></p><p><strong>__ xxx: 类中的私有成员</strong></p><p>在对象外部可以通过“对象名._类名 __ xxx”访问</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>• 公有方法</p><p>属于对象，可以访问属于类和对象的成员，公有方法通过对象名直接调</p><p>用，通过类名来调用属于对象的公有方法，需要显式为该方法 “self”</p><p>参数传递一个对象名，用来确定访问哪个对象的数据成员 </p><p>• 私有方法</p><p>属于对象，私有方法的名字以两个下划线“__”开始，可以访问属于类</p><p>和对象的成员，私有方法在属于对象的方法中通过“self”调用或在外部</p><p>通过Python支持的特殊方式来调用 </p><p>• 静态方法</p><p>通过类名和对象名调用，不能直接访问属于对象的成员，只能访问属于类的成员 </p><p>• 类方法</p><p>通过类名和对象名调用，不能直接访问属于对象的成员，只能访问属于类的成员，一般将“<strong>cls</strong>”作为类方法的第一个参数名称，但也可以使用其他的名字作为参数，并且在调用类方法时不需要为“cls”参数传递值</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>• 使用@property或property()声明属性</p><p>• Python 2.x和Python 3.x对属性的实现和处理方式</p><p>不一样，内部实现有较大的差异</p><p>• Python 2.x为对象新增数据成员隐藏同名已有属性</p><p>• Python 3.x属性实现完整，支持更全面的保护机制</p><h3 id="类常用特殊方法"><a href="#类常用特殊方法" class="headerlink" title="类常用特殊方法"></a>类常用特殊方法</h3><p>• Python中类的构造函数是__init__()</p><p>一般用来为数据成员设置初值或进行其他必要的初始化工作，</p><p>在创建对象时被自动调用和执行，可以通过为构造函数定义</p><p>默认值参数来实现类似于其他语言中构造函数重载的目的。</p><p>如果用户没有设计构造函数，Python将提供一个默认的构造</p><p>函数用来进行必要的初始化工作。</p><p>• Python中类的析构函数是__del__()</p><p>一般用来释放对象占用的资源，在Python删除对象和收回对</p><p>象空间时被自动调用和执行。如果用户没有编写析构函数，</p><p>Python将提供一个默认的析构函数进行必要的清理工作。 </p><p>• 其他方法</p><h3 id="继承机制"><a href="#继承机制" class="headerlink" title="继承机制"></a>继承机制</h3><p>• 继承的目的是代码复用和设计复用 </p><p>• 继承关系中，已有的、设计好的类称为父类或基类，新设计的类称为子类或派生类 </p><p>• 派生类可以继承父类的公有成员，但不能继承其私有成员 </p><p>• 在派生类中调用基类的方法，可以使用内置函数super()或者通过“基类名.方法名()”的方式实现</p><p>• Python支持多继承，如果父类中有相同的方法名，而在子类中使用时没有指定父类名，则Python解释器将从左向右按顺序进行搜索</p><h2 id="Math库"><a href="#Math库" class="headerlink" title="Math库"></a>Math库</h2><ol><li><p>log(x,a) 如果不指定a，则默认以e为基数，a参数给定时，将 x <strong>以a为底的对数</strong>返回。<br>&gt;&gt;&gt; math.log(math.e)<br>1.0<br>&gt;&gt;&gt; math.log(32,2)<br>5.0<br>&gt;&gt;&gt;</p></li><li><p>取<strong>大于等于</strong>x的最小的整数值，如果x是一个整数，则返回x<br>&gt;&gt;&gt; math.ceil(4.12)<br>5</p></li><li><p>pow()返回x的y次方，即x**y<br>&gt;&gt;&gt; math.pow(3,4)<br>81.0</p></li><li><p>floor()取<strong>小于等于</strong>x的最大的整数值，如果x是一个整数，则返回自身<br>&gt;&gt;&gt; math.floor(4.999)<br>4</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora入门</title>
      <link href="/2021/082260911.html"/>
      <url>/2021/082260911.html</url>
      
        <content type="html"><![CDATA[<h2 id="目录（TOC"><a href="#目录（TOC" class="headerlink" title="目录（TOC)"></a>目录（TOC)</h2><p>输入 <code>[ toc ]</code> 然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li><p>Ctrl+1 一阶标题</p></li><li><p>Ctrl+2 二阶标题</p></li><li><p>Ctrl+3 三阶标题</p></li><li><p>Ctrl+4 四阶标题</p></li><li><p>Ctrl+5 五阶标题</p></li><li><p>Ctrl+6 六阶标题</p></li><li><p>Ctrl+L  选中某句话</p></li><li><p>Ctrl+D  选中某个单词</p></li><li><p>Ctrl+E  选中相同格式的文字</p></li><li><p>Alt+Shift+5 删除线</p></li><li><p>Ctrl+Shift+M    公式块</p></li><li><p>Ctrl+B  字体加粗</p></li><li><p>Ctrl+I  字体倾斜</p></li><li><p>Ctrl+U  下划线</p></li><li><p>Ctrl+Home   返回Typora顶部</p></li><li><p>Ctrl+End    返回Typora底部</p></li><li><p>Ctrl+T  创建表格</p></li><li><p>Ctrl+K  创建超链接</p></li><li><p>Ctrl+F  搜索</p></li><li><p>Ctrl+H  搜索并替换</p></li><li><p>Ctrl+Shift+I    插入图片</p></li><li><p>Ctrl+Shift+Q    引用</p><p>注：一些实体符号需要在实体符号之前加”\”才能够显示</p></li></ul><h2 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h2><ul><li>&gt; + 空格 + 引用文字</li></ul><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用 * + - 都可以创建一个无序列表</p><ul><li>AAA</li><li>BBB</li><li>CCC</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用 1. 2. 3. 创建有序列表</p><ol><li>AAA</li><li>BBB</li><li>CCC</li></ol><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>\ -[ ] 不勾选<br>\ -[x] 勾选</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在Typora中插入程序代码的方式有两种：使用反引号 `（~ 键）、使用缩进（Tab）。</p><ul><li><p>插入行内代码，即插入一个单词或者一句代码的情况，使用 <code>code</code> 这样的形式插入。</p></li><li><p>插入多行代码输入3个反引号（`） + 回车，并在后面选择一个语言名称即可实现语法高亮。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。根据需要加载 Mathjax 对数学公式进行渲染。</p><p>按下 <code>$$</code>，然后按下回车键，即可进行数学公式的编辑。<br>$$<br>\mathbf{V}_1\times\mathbf{V}_2 = \mathbf{X}_3<br>$$</p><h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><p>输入 <code>| 表头1 | 表头2 |</code>并回车。即可创建一个包含2列表。快捷键 <code>Ctrl + T</code>弹出对话框。</p><table><thead><tr><th align="center">id</th><th align="center">number</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>不管是哪种方式，第一行为表头，第二行为分割表头和主体部分，第三行开始每一行为一个表格行</li><li>列与列之间用管道符号<code>|</code> 隔开</li><li>还可设置对齐方式(表头与内容之间)，如果不使用对齐标记，内容默认左对齐，表头居中对齐<ul><li>左对齐 ：|</li><li>右对齐 |：</li><li>中对齐 ：|：</li></ul></li><li>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 | 来标记单元格边界</li><li>为了使 Markdown 更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外就不需要了）。</li></ul><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>这个例子的脚注为[<a href="https://www.cnblogs.com/hider/p/11614688.html#fn1">1]</a>。</p><p>注意：该例子脚注标识是1，脚注标识可以为字母数字下划线，但是暂不支持中文。脚注内容可为任意字符，包括中文。</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>输入 <code>***</code> 或者 <code>---</code> 再按回车即可绘制一条水平线，如下：</p><h2 id="跨度元素"><a href="#跨度元素" class="headerlink" title="跨度元素"></a>跨度元素</h2><p>跨度元素即图片，网址，视频等，在Typora中输入后，会立即载入并呈现。</p><h2 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h2><p>这是一个带有标题属性的 <code>[链接](http://example.com/ "标题")</code><br>这是一个没有标题属性的 <code>[链接](http://example.net/)</code></p><p><a href="http://example.com/%22%E4%BD%A0%E5%A5%BD%22">链接</a></p><p><a href="http://example.net/">链接</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>这是一个[参考链接]id – 无法执行</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p>Typora允许用&lt;括号括起来&gt;, 把URL作为链接插入。</p><p>Typora还会自动链接标准网址。</p><p><a href="http://www.baidu.com/">www.baidu.com</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code>![显示的文字](C:\Users\Hider\Desktop\echart.png "图片标题")![显示的文字](C:\Users\Hider\Desktop\echart.png)</code></pre><p>除了以上2种方式之外，还可以直接将图片拖拽进来，自动生成链接。</p><h2 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h2><p>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p><p><span class="github-emoji"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>😺</p><h2 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h2><p>可以使用 <code>&lt;sub&gt;文本&lt;/sub&gt;</code>实现下标。</p><p>H<sub>2</sub>O</p><h2 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h2><p>可以使用<code>&lt;sup&gt;文本&lt;/sup&gt;</code>实现上标。</p><p>X<sup>2</sup></p><h2 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h2><p>使用 <code>&lt;center&gt;这是要居中的内容&lt;/center&gt;</code>可以使文本居中</p><center>这是要居中的文本内容</center><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p>使用 <code>空格 + 空格 + Enter</code>可以实现换行，例如：</p><p>或者可以使用<code>&lt;br/&gt;</code>实现换行。</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><h2 id="文本加粗"><a href="#文本加粗" class="headerlink" title="文本加粗"></a><strong>文本加粗</strong></h2><p>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><p>\   反斜线 `   反引号 *   星号 <em>_   下划线 {}  花括号 []  方括号 ()  小括号 #   井字号 +   加号 -   减号 .   英文句点 !   感叹号</em></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>支持HTML</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的<font color="red">HTML</font>元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">font-color:</span>'red'</span><span class="token punctuation">></span></span>红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbd</span><span class="token punctuation">></span></span> -- 白色框框</code></pre>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法及快捷键</title>
      <link href="/2021/082025151.html"/>
      <url>/2021/082025151.html</url>
      
        <content type="html"><![CDATA[<p><code>#</code>: 一级标题</p><p><code>##</code>: 二级标题</p><p><code>###</code>: 三级标题</p><p>每写完一个段落要隔一行空行.</p><p>就像这样, 隔了一行空行.</p><p>ctrl+k +v: Markdown 预览快捷键</p><p><code>---</code>: 分割线</p><p><code>**</code>: <strong>重点加粗</strong></p><p><code>*a*</code>: <em>斜体</em></p><p><code>~~a~~</code>:  <del>删除线</del></p><p><code>==高亮==</code></p><hr><p>列表:</p><ul><li>无序列表<ul><li>嵌套无序列表</li><li>嵌套无序列表</li></ul></li><li>无序列表</li><li>无序列表</li></ul><ol><li>有序列表 1<ol><li>嵌套有序列表 1</li><li>嵌套有序列表 2</li></ol></li><li>有序列表 2</li><li>有序列表 3</li></ol><p>任务列表:</p><p><code>- [x] 已经完成的事 1</code><br><code>- [x] 已经完成的事 2</code><br><code>- [x] 已经完成的事 3</code><br><code>- [ ] 仍未完成的事 4</code><br><code>- [ ] 仍未完成的事 5</code></p><hr><p>引用文本:</p><p><code>&gt; 引用别人的话</code> </p><blockquote><p>引用别人说的话<br>就这样写<br>By. OrangeX4</p></blockquote><hr><p>这是 <code>行内代码</code> 语法.</p><p>代码块语法:</p><p><code>```</code> python {.line-numbers}<br>print(“Hello, World!”)<br><code>```</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span></code></pre><hr><p><code>[超链接名称](链接地址)</code></p><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">超链接名称</a></p><p><code>![图片提示语](图片地址)</code></p><p><img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片提示语"></p><hr><p>表格:</p><p>`| 表头 | 表头 |<br>| —- | —- |<br>| 内容 | 内容 |<br>| 内容 | 内容 |</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>内容</td><td>内容</td></tr><tr><td>内容</td><td>内容</td></tr></tbody></table><!-- 自动表格对齐: Shift + Alt + F --><hr><!-- 注释: --><!-- 你看不见我 ctrl+/ --><h1 id="数学公式支持"><a href="#数学公式支持" class="headerlink" title="数学公式支持"></a>数学公式支持</h1><p>行内公式: </p><p>单位圆 $x^2+y^2=1$</p><p>公式块:</p><p>$$<br>\begin{cases}<br>x=\rho\cos\theta \<br>y=\rho\sin\theta \<br>\end{cases}<br>$$</p><hr><h2 id="1-上标和下标"><a href="#1-上标和下标" class="headerlink" title="1. 上标和下标"></a>1. 上标和下标</h2><p>上标 $x^2 + y^{12} = 1$</p><p>上标 $x_1 + y_{12} = 1$</p><hr><h2 id="2-分式"><a href="#2-分式" class="headerlink" title="2. 分式"></a>2. 分式</h2><p>较小的行内行分数 $\frac{1}{2}$</p><p>展示型的分式 $\displaystyle\frac{x+1}{x-1}$</p><hr><h2 id="3-科研"><a href="#3-科研" class="headerlink" title="3. 科研"></a>3. 科研</h2><p>开平方 $\sqrt{2}$</p><p>开 $n$ 次方 $\sqrt[n]{2}$</p><hr><h2 id="4-空格"><a href="#4-空格" class="headerlink" title="4. 空格"></a>4. 空格</h2><p>紧贴 $a!b$</p><p>没有空格 $ab$</p><p>小空格 $a,b$</p><p>中等空格 $a;b$</p><p>大空格 $a\ b$</p><p>quad 空格 $a\quad b$</p><p>两个 quad 空格 $a\qquad b$</p><hr><h2 id="5-累加、累乘和积分"><a href="#5-累加、累乘和积分" class="headerlink" title="5. 累加、累乘和积分"></a>5. 累加、累乘和积分</h2><p>累加 $\sum_{k=1}^n\frac{1}{k}  \quad  \displaystyle\sum_{k=1}^n\frac{1}{k}$</p><p>累乘 $\prod_{k=1}^n\frac{1}{k}  \quad  \displaystyle\prod_{k=1}^n\frac{1}{k}$</p><p>积分 $\displaystyle \int_0^1x{\rm d}x  \quad  \iint_{D_{xy}}  \quad  \iiint_{\Omega_{xyz}}$</p><hr><h2 id="6-括号修饰"><a href="#6-括号修饰" class="headerlink" title="6. 括号修饰"></a>6. 括号修饰</h2><p>用 \left 和 \right 可以让括号适配内部大小</p><p>圆括号 $\displaystyle \left(\sum_{k=1}^{n}\frac{1}{k} \right)^2$</p><p>方括号 $\displaystyle \left[\sum_{k=1}^{n}\frac{1}{k} \right]^2$</p><p>花括号 $\displaystyle \left{\sum_{k=1}^{n}\frac{1}{k} \right}^2$</p><p>尖括号 $\displaystyle \left\langle\sum_{k=1}^{n}\frac{1}{k} \right\rangle^2$</p><hr><h2 id="7-多行算式对齐"><a href="#7-多行算式对齐" class="headerlink" title="7. 多行算式对齐"></a>7. 多行算式对齐</h2><p>居中:</p><p>$$<br>\begin{aligned}<br>y &amp;=(x+5)^2-(x+1)^2 \<br>&amp;=(x^2+10x+25)-(x^2+2x+1) \<br>&amp;=8x+24 \<br>\end{aligned}<br>$$</p><p>左对齐:</p><p>$<br>\begin{aligned}<br>y &amp;=(x+5)^2-(x+1)^2 \<br>&amp;=(x^2+10x+25)-(x^2+2x+1) \<br>&amp;=8x+24 \<br>\end{aligned}<br>$</p><hr><h2 id="8-方程组"><a href="#8-方程组" class="headerlink" title="8. 方程组"></a>8. 方程组</h2><p>$$<br>\begin{cases}<br>k_{11}x_1+k_{12}x_2+\cdots+k_{1n}x_n=b_1 \<br>k_{21}x_1+k_{22}x_2+\cdots+k_{2n}x_n=b_2 \<br>\cdots \<br>k_{n1}x_1+k_{n2}x_2+\cdots+k_{nn}x_n=b_n \<br>\end{cases}<br>$$</p><hr><h2 id="9-矩阵"><a href="#9-矩阵" class="headerlink" title="9. 矩阵"></a>9. 矩阵</h2><p>矩阵:</p><p>$$<br>\begin{pmatrix}<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>\end{pmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>\end{bmatrix}<br>$$ </p><p>行列式: </p><p>$$<br>\begin{vmatrix}<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>1 &amp; 1 &amp; \cdots &amp; 1 \<br>\end{vmatrix}<br>$$</p><hr><h2 id="10-特殊字符"><a href="#10-特殊字符" class="headerlink" title="10. 特殊字符"></a>10. 特殊字符</h2><p>可以搜索 “Latex 符号表”</p><hr><h2 id="11-零碎的重要语法"><a href="#11-零碎的重要语法" class="headerlink" title="11. 零碎的重要语法"></a>11. 零碎的重要语法</h2><p>点乘 $\cdot$, 叉乘 $\times$, 异或 $\otimes$, 直和 $\oplus$, 加减 $\pm$, 复合 $\circ$.<br>小于等于 $\leq$, 大于等于 $\geq$, 不等 $\neq$, 恒等 $\equiv$, 约等 $\approx$, 等价 $\cong$, 相似 $\sim$, 相似等于 $\simeq$, 点等 $\doteq$.<br>逻辑与 $\land$, 逻辑或 $\lor$, 逻辑非 $\lnot$, 蕴涵 $\to$, 等价 $\leftrightarrow$.<br>因为 $\because$, 所以 $\therefore$, 存在 $\exist$, 任意 $\forall$.<br>左小箭头 $\leftarrow$, 右小箭头 $\rightarrow$, 左大箭头 $\Leftarrow$, 右大箭头 $\Rightarrow$, 右长箭头 $\xrightarrow[fgh]{abcde}$.<br>属于 $\in$, 包含于 $\subset$, 真包含于 $\subseteq$, 交 $\cap$, 并 $\cup$, 空集 $\empty$<br>短向量 $\vec{x}$, 长向量 $\overrightarrow{AB}$, 上横线 $\overline{p}$.<br>无限 $\infty$, 极限 $\lim$, 微分 ${\rm d}$, 偏导 $\partial$, 点求导 $\dot{y}$, 点二阶导 $\ddot{y}$, 变化量 $\Delta$, 梯度 $\nabla$.<br>横省略 $\cdots$, 竖省略 $\vdots$, 斜省略 $\ddots$.<br>常见函数 $\sin$, $\cos$, $\tan$, $\arcsin$, $\arccos$, $\arctan$, $\ln$, $\log$, $\exp$.</p><hr><h1 id="VSCode-快捷键"><a href="#VSCode-快捷键" class="headerlink" title="VSCode 快捷键"></a>VSCode 快捷键</h1><p>原生快捷键<br>通用操作<br>Ctrl + C, 复制当前文本<br>Ctrl + V, 粘贴当前文本<br>Ctrl + Z, 撤销<br>Ctrl + Shift + Z, 反撤销<br>Shift + Alt + F, 整理代码<br>Ctrl + /, 将当前行注释 / 反注释, 当多行文本被选中时, 将多行文本注释<br>光标操作<br>Ctrl + ← 将光标向左移动一个单词<br>Ctrl + → 将光标向右移动一个单词<br>Ctrl + Alt + ↑, 向上加入一个光标<br>Ctrl + Alt + ↓, 向下加入一个光标<br>Ctrl + Alt + U, 撤销上次光标操作<br>界面移动<br>Ctrl + ↑ 向上移动当前界面<br>Ctrl + → 向下移动当前界面<br>选中操作<br>Shift + ← 向左选中 / 反选中一个字符 (重要)<br>Shift + → 向右选中 / 反选中一个字符 (重要)<br>Ctrl + Shift + ← 向左选中 / 反选中一个单词 (重要)<br>Ctrl + Shift + → 向右选中 / 反选中一个单词 (重要)<br>Ctrl + D 当前有选中文本时, 将下一个与其相同的文本加入选中 (重要)<br>文本行操作<br>Ctrl + C 当前无选中文本时, 复制当前行<br>Shift + Alt + ↑ 向上复制当前行, 当多行文本被选中时, 向上复制多行 (重要)<br>Shift + Alt + ↓ 向下复制当前行, 当多行文本被选中时, 向下复制多行 (重要)<br>Alt + ↑ 向上移动当前行, 当多行文本被选中时, 将当前多行文本向上移动 (重要)<br>Alt + ↓ 向下移动当前行, 当多行文本被选中时, 将当前多行文本向下移动 (重要)<br>插件增加的快捷键<br>Markdown 语法<br>Ctrl + B 当前有选中文本时, 将文本加粗<br>Ctrl + I 当前有选中文本时, 将文本变为斜体<br>Ctrl + M 进入数学公式模式 (加入美元符)<br>图片粘贴<br>Ctrl + Alt + V 粘贴剪贴板图片 (本地)<br>Ctrl + Alt + V 粘贴剪贴板图片 (图床)<br>光标操作<br>Ctrl + Alt + U 将多选光标变为单选<br>选中操作<br>Shift + Alt + ← 向左复制当前选中文本 (重要)<br>Shift + Alt + → 向右复制当前选中文本 (重要)<br>Alt + ← 向左移动当前选中文本一个字符 (重要)<br>Alt + → 向右移动当前选中文本一个字符 (重要)<br>Ctrl + Alt + ← 向左移动当前选中文本一个单词 (重要)<br>Ctrl + Alt + → 向右移动当前选中文本一个单词 (重要)<br>计算器功能<br>Ctrl + Shift + Alt + E 计算当前选中表达式, 用等号连接并输出<br>Ctrl + Shift + Alt + R 计算当前选中表达式, 并替换当前选中表达式<br>Ctrl + Shift + Alt + D 定义当前选中表达式, 无输出</p><hr><h2 id="hexo快捷键"><a href="#hexo快捷键" class="headerlink" title="hexo快捷键"></a>hexo快捷键</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo n <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Generate-hexo-生成静态网页"><a href="#Generate-hexo-生成静态网页" class="headerlink" title="Generate hexo (生成静态网页)"></a>Generate hexo (生成静态网页)</h3><pre class=" language-bash"><code class="language-bash">$ hexo g</code></pre><h3 id="Deploy-hexo-将本地数据部署到仓库"><a href="#Deploy-hexo-将本地数据部署到仓库" class="headerlink" title="Deploy hexo (将本地数据部署到仓库)"></a>Deploy hexo (将本地数据部署到仓库)</h3><pre class=" language-bash"><code class="language-bash">$ hexo d</code></pre><h3 id="Generate-hexo-生成并部署"><a href="#Generate-hexo-生成并部署" class="headerlink" title="Generate hexo (生成并部署)"></a>Generate hexo (生成并部署)</h3><pre class=" language-bash"><code class="language-bash">$ hexo g -d</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
